{"version":3,"sources":["component/Greeting.js","component/FriendClass.js","component/ButtonCounter.js","App.js","component/bases.js","serviceWorker.js","index.js"],"names":["Greeting","FriendClass","props","changeLoadingState","setState","isLoading","state","getElementName","index","data","console","log","classMateName","classMate","this","onClick","id","map","key","Component","button","title","task","App","incrementCount","count","decrementCount","className","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAWeA,MATf,WACI,OACI,6BACI,gDACA,+CCkEGC,E,YArEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAwBRC,mBAAqB,WACnB,EAAKC,SAAS,CACZC,WAAY,EAAKC,MAAMD,aA3BR,EA+BnBE,eAAiB,SAACC,EAAOC,GACvBC,QAAQC,IAAR,WAAgBH,EAAhB,aAA0BC,IAC1B,EAAKL,SAAS,CACZQ,cAAeH,KA/BjB,EAAKH,MAAQ,CACXD,WAAW,EACXQ,UAAW,CACT,OACA,QACA,QACA,QACA,MACA,QACA,OACA,QACA,OACA,QACA,aACA,QAEFD,cAAe,IAnBA,E,sEAsCT,IAAD,OACP,OAAIE,KAAKR,MAAMD,UACN,4BAAQU,QAASD,KAAKX,oBAAtB,yBAGL,yBAAKa,GAAG,YACN,4BAAQD,QAASD,KAAKX,oBACnBW,KAAKR,MAAMD,UAAY,0BAA4B,SAGtD,6BACE,4BACGS,KAAKR,MAAMO,WACVC,KAAKR,MAAMO,UAAUI,KAAI,SAACR,EAAMD,GAC9B,OACE,wBACEU,IAAKV,EACLO,QAAS,kBAAM,EAAKR,eAAeC,EAAOC,KAEzCA,a,GA1DGU,aCALC,E,iLACN,IAAD,EACcN,KAAKZ,MAApBmB,EADC,EACDA,MAAOC,EADN,EACMA,KACZ,OAAO,4BAAQP,QAASO,GAAjB,IAAyBD,EAAzB,S,GAHqBF,aCyDrBI,E,YAjDb,aAAe,IAAD,8BACZ,+CAMFC,eAAiB,WACf,EAAKpB,SAAS,CACZqB,MAAO,EAAKnB,MAAMmB,MAAO,KATf,EAadC,eAAiB,WACf,EAAKtB,SAAS,CACZqB,MAAO,EAAKnB,MAAMmB,MAAO,KAb3B,EAAKnB,MAAQ,CACXmB,MAAM,GAHI,E,sEAqBZ,IAAIA,EAAQX,KAAKR,MAAMmB,MACvB,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,0CCjCK,kBDkCL,oCC/BE,ED+BF,cACA,6BACE,8DCtCE,QDsCF,MCvCC,SD2CH,kBAAC,EAAD,OAGF,6BAEE,qCAAWF,GACX,kBAAC,EAAD,CAAeJ,MAAM,IAAIC,KAAMR,KAAKU,iBACpC,kBAAC,EAAD,CAAeH,MAAM,IAAIC,KAAMR,KAAKY,uB,GAzC5BE,IAAMT,WEGJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.375e1d3a.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Greeting () {\n    return (\n        <div>\n            <h1>Halo Everybodies</h1>\n            <h3>How are you ?</h3>\n        </div>\n    )\n    \n}\nexport default Greeting;","import React, { Component } from \"react\";\n\nclass FriendClass extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      classMate: [\n        \"Danu\",\n        \"Iqbal\",\n        \"Zakin\",\n        \"Latif\",\n        \"Ega\",\n        \"Iqbal\",\n        \"Baim\",\n        \"Bagus\",\n        \"Iman\",\n        \"Iqbal\",\n        \"Pak Sofyan\",\n        \"Dian\"\n      ],\n      classMateName: \"\"\n    };\n\n    // this.changeLoadingState = this.changeLoadingState.bind(this);\n  }\n\n  changeLoadingState = () => {\n    this.setState({\n      isLoading: !this.state.isLoading\n    });\n  };\n\n  getElementName = (index, data) => {\n    console.log(`[${index}] ${data}`);\n    this.setState({\n      classMateName: data\n    });\n  };\n\n  render() {\n    if (this.state.isLoading) {\n      return <button onClick={this.changeLoadingState}>Here is My Classmates</button>;\n    } else {\n      return (\n        <div id=\"fragment\">\n          <button onClick={this.changeLoadingState}>\n            {this.state.isLoading ? \"Ini Beberapa  Classmate\" : \"Close\"}\n          </button>\n\n          <div>\n            <ul>\n              {this.state.classMate &&\n                this.state.classMate.map((data, index) => {\n                  return (\n                    <li\n                      key={index}\n                      onClick={() => this.getElementName(index, data)}\n                    >\n                      {data}\n                    </li>\n                  );\n                })}\n            </ul>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default FriendClass;\n","import React, { Component } from \"react\";\n\nexport default class button extends Component {\n    render () {\n        let {title, task} = this.props;\n        return <button onClick={task}> {title} </button> \n    }\n}","import React from \"react\";\nimport \"./App.css\";\nimport Greeting from \"./component/Greeting\";\nimport age from \"./component/bases\";\nimport { name, name1 } from \"./component/bases\";\nimport {myName} from \"./component/bases\";\nimport FriendClass from \"./component/FriendClass\";\nimport ButtonCounter from \"./component/ButtonCounter\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      count:0\n    };\n  }\n\n  incrementCount = () => {\n    this.setState({\n      count: this.state.count +1\n    });\n  };\n\n  decrementCount = () => {\n    this.setState({\n      count: this.state.count -1\n      \n    });\n  };\n\n  render(){\n    let count = this.state.count\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Greeting />\n          <h3>My name is {myName}</h3>\n          <h3>I am {age} years old</h3>\n          <div>\n            <h3>\n              My Impact byte instructors are {name1} & {name}\n            </h3>\n          </div>\n          <FriendClass />\n        </header>\n\n        <div>\n          {/* <Info/> */}\n          <h2>Count:{count}</h2>\n          <ButtonCounter title=\"+\" task={this.incrementCount}/>\n          <ButtonCounter title=\"-\" task={this.decrementCount}/>\n        </div>\n\n\n      </div>\n    )\n  }\n}\n\nexport default App","const name = \"Danu\";\nconst name1 = \"Auzan\";\n\nconst myName = \"Taufik Hidayat\";\n\n\nconst age = 5;\n\nexport default age;\n\nexport { name, name1, myName};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}